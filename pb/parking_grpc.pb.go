// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SessionHasPermissionTo(ctx context.Context, in *Session, opts ...grpc.CallOption) (*AuthorizationResult, error)
	SessionHasPermissionToCamera(ctx context.Context, in *SessionCamera, opts ...grpc.CallOption) (*AuthorizationResult, error)
	GetCamerasByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CameraList, error)
	DeleteCameraFromUser(ctx context.Context, in *CameraId, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SessionHasPermissionTo(ctx context.Context, in *Session, opts ...grpc.CallOption) (*AuthorizationResult, error) {
	out := new(AuthorizationResult)
	err := c.cc.Invoke(ctx, "/parking.UserService/SessionHasPermissionTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SessionHasPermissionToCamera(ctx context.Context, in *SessionCamera, opts ...grpc.CallOption) (*AuthorizationResult, error) {
	out := new(AuthorizationResult)
	err := c.cc.Invoke(ctx, "/parking.UserService/SessionHasPermissionToCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCamerasByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CameraList, error) {
	out := new(CameraList)
	err := c.cc.Invoke(ctx, "/parking.UserService/GetCamerasByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteCameraFromUser(ctx context.Context, in *CameraId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/parking.UserService/DeleteCameraFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	SessionHasPermissionTo(context.Context, *Session) (*AuthorizationResult, error)
	SessionHasPermissionToCamera(context.Context, *SessionCamera) (*AuthorizationResult, error)
	GetCamerasByUserId(context.Context, *UserId) (*CameraList, error)
	DeleteCameraFromUser(context.Context, *CameraId) (*Empty, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) SessionHasPermissionTo(context.Context, *Session) (*AuthorizationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionHasPermissionTo not implemented")
}
func (UnimplementedUserServiceServer) SessionHasPermissionToCamera(context.Context, *SessionCamera) (*AuthorizationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionHasPermissionToCamera not implemented")
}
func (UnimplementedUserServiceServer) GetCamerasByUserId(context.Context, *UserId) (*CameraList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCamerasByUserId not implemented")
}
func (UnimplementedUserServiceServer) DeleteCameraFromUser(context.Context, *CameraId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCameraFromUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SessionHasPermissionTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SessionHasPermissionTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parking.UserService/SessionHasPermissionTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SessionHasPermissionTo(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SessionHasPermissionToCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCamera)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SessionHasPermissionToCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parking.UserService/SessionHasPermissionToCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SessionHasPermissionToCamera(ctx, req.(*SessionCamera))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCamerasByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCamerasByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parking.UserService/GetCamerasByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCamerasByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteCameraFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteCameraFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parking.UserService/DeleteCameraFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteCameraFromUser(ctx, req.(*CameraId))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionHasPermissionTo",
			Handler:    _UserService_SessionHasPermissionTo_Handler,
		},
		{
			MethodName: "SessionHasPermissionToCamera",
			Handler:    _UserService_SessionHasPermissionToCamera_Handler,
		},
		{
			MethodName: "GetCamerasByUserId",
			Handler:    _UserService_GetCamerasByUserId_Handler,
		},
		{
			MethodName: "DeleteCameraFromUser",
			Handler:    _UserService_DeleteCameraFromUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/parking.proto",
}

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&_Notification_serviceDesc, srv)
}

var _Notification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "pb/parking.proto",
}

// ObjectClient is the client API for Object service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectClient interface {
}

type objectClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectClient(cc grpc.ClientConnInterface) ObjectClient {
	return &objectClient{cc}
}

// ObjectServer is the server API for Object service.
// All implementations must embed UnimplementedObjectServer
// for forward compatibility
type ObjectServer interface {
	mustEmbedUnimplementedObjectServer()
}

// UnimplementedObjectServer must be embedded to have forward compatible implementations.
type UnimplementedObjectServer struct {
}

func (UnimplementedObjectServer) mustEmbedUnimplementedObjectServer() {}

// UnsafeObjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServer will
// result in compilation errors.
type UnsafeObjectServer interface {
	mustEmbedUnimplementedObjectServer()
}

func RegisterObjectServer(s grpc.ServiceRegistrar, srv ObjectServer) {
	s.RegisterService(&_Object_serviceDesc, srv)
}

var _Object_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Object",
	HandlerType: (*ObjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "pb/parking.proto",
}

// CameraClient is the client API for Camera service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraClient interface {
	Get(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraReply, error)
}

type cameraClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraClient(cc grpc.ClientConnInterface) CameraClient {
	return &cameraClient{cc}
}

func (c *cameraClient) Get(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraReply, error) {
	out := new(GetCameraReply)
	err := c.cc.Invoke(ctx, "/parking.Camera/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServer is the server API for Camera service.
// All implementations must embed UnimplementedCameraServer
// for forward compatibility
type CameraServer interface {
	Get(context.Context, *GetCameraRequest) (*GetCameraReply, error)
	mustEmbedUnimplementedCameraServer()
}

// UnimplementedCameraServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServer struct {
}

func (UnimplementedCameraServer) Get(context.Context, *GetCameraRequest) (*GetCameraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCameraServer) mustEmbedUnimplementedCameraServer() {}

// UnsafeCameraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServer will
// result in compilation errors.
type UnsafeCameraServer interface {
	mustEmbedUnimplementedCameraServer()
}

func RegisterCameraServer(s grpc.ServiceRegistrar, srv CameraServer) {
	s.RegisterService(&_Camera_serviceDesc, srv)
}

func _Camera_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parking.Camera/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServer).Get(ctx, req.(*GetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Camera_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Camera",
	HandlerType: (*CameraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Camera_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/parking.proto",
}

// ParkingClient is the client API for Parking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingClient interface {
}

type parkingClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingClient(cc grpc.ClientConnInterface) ParkingClient {
	return &parkingClient{cc}
}

// ParkingServer is the server API for Parking service.
// All implementations must embed UnimplementedParkingServer
// for forward compatibility
type ParkingServer interface {
	mustEmbedUnimplementedParkingServer()
}

// UnimplementedParkingServer must be embedded to have forward compatible implementations.
type UnimplementedParkingServer struct {
}

func (UnimplementedParkingServer) mustEmbedUnimplementedParkingServer() {}

// UnsafeParkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServer will
// result in compilation errors.
type UnsafeParkingServer interface {
	mustEmbedUnimplementedParkingServer()
}

func RegisterParkingServer(s grpc.ServiceRegistrar, srv ParkingServer) {
	s.RegisterService(&_Parking_serviceDesc, srv)
}

var _Parking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Parking",
	HandlerType: (*ParkingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "pb/parking.proto",
}

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&_Post_serviceDesc, srv)
}

var _Post_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Post",
	HandlerType: (*PostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "pb/parking.proto",
}
